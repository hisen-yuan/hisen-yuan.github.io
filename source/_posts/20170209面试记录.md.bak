---
title: 20170209面试记录
tags: [java,面试]
date: 2017-02-10 14:07:32
categories: java
---

上午那家公司约的是十一点面试

做完面试题等了好久技术负责人才来

这点差评，整个的题目感觉简单，技术负责人前后端好像分的不是很清楚

下午这家公司感觉面试官技术不错

### 一、多线程中用哪些集合类？

```
多线程中使用集合类主要是考虑线程安全
线程安全的集合类有
Vector属于线程安全级别的，但是大多数情况下不使用Vector，因为线程安全需要更大的系统开销
Hashtable 中的方法是同步的
StringBuilder和StringBuffer的方法是一模一样，StringBuilder是线程安全的
```
<!-- more -->
###二、socket编程步骤？

```
客户端:

1.用服务器的IP地址和端口号实例化Socket对象。

2.调用connect方法，连接到服务器上。

3.将发送到服务器的IO流填充到IO对象里，比如BufferedReader/PrintWriter。

4.利用Socket提供的getInputStream和getOutputStream方法，通过IO流对象，向服务器发送数据流。

5. 通讯完成后，关闭打开的IO对象和Socket。
6.

服务器：

1. 在服务器，用一个端口来实例化一个 ServerSocket对象。此时，服务器就可以这个端口时刻监听从客户端发来的连接请求。

2.调用ServerSocket的accept方法，开始监听连接从端口上发来的连接请求。 　　

3.利用accept方法返回的客户端的Socket对象，进行读写IO的操作

通讯完成后，关闭打开的流和Socket对象。
```

### 三、JDBC有哪几步？防注入是哪个类？
使用PreparedStatement防止SQL注入

JDBC包含7个步骤：

**1.加载JDBC驱动程序 **

在连接数据库之前，首先要加载想要连接的数据库的驱动到JVM（Java虚拟机），

这通过java.lang.Class类的静态方法forName(String  className)实现。

例如：

```
try {
	// 加载MySql的驱动类
	Class.forName("com.mysql.jdbc.Driver");
} catch (ClassNotFoundException e) {
	System.out.println("找不到驱动程序类 ，加载驱动失败！");
	e.printStackTrace();
}
```

成功加载后，会将Driver类的实例注册到DriverManager类中。

**2.提供JDBC连接的URL  **
连接URL定义了连接数据库时的协议、子协议、数据源标识

书写形式：协议：子协议：数据源标识

协议：在JDBC中总是以jdbc开始

子协议：是桥连接的驱动程序或是数据库管理系统名称。

数据源标识：标记找到数据库来源的地址与连接端口。

例如：（MySql的连接URL）

```
jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=gbk;
```

useUnicode=true：表示使用Unicode字符集

如果characterEncoding设置为gb2312或GBK，本参数必须设置为true

characterEncoding=gbk：字符编码方式。

**3.创建数据库的连接**
要连接数据库，需要向java.sql.DriverManager请求并获得Connection对象,该对象就代表一个数据库的连接。

使用DriverManager的getConnectin(String url , String username , String password )

方法传入指定的欲连接的数据库的路径、数据库的用户名和密码来获得。

例如：

```
// 连接MySql数据库，用户名和密码都是root
String url = "jdbc:mysql://localhost:3306/test";
String username = "root";
String password = "root";
try {
	Connection con = DriverManager.getConnection(url, username,
			password);
} catch (SQLException se) {
	System.out.println("数据库连接失败！");
	se.printStackTrace();
}
```

**4.创建一个Statement**
要执行SQL语句，必须获得java.sql.Statement实例，

Statement实例分为以下3种类型：

1、执行静态SQL语句。通常通过Statement实例实现。

2、执行动态SQL语句。通常通过PreparedStatement实例实现。

3、执行数据库存储过程。通常通过CallableStatement实例实现。

具体的实现方式：

```
Statement stmt = con.createStatement();
PreparedStatement pstmt = con.prepareStatement(sql);
CallableStatement cstmt = con.prepareCall("{CALL demoSp(? , ?)}");
```

**5.执行SQL语句   **
Statement接口提供了三种执行SQL语句的方法：executeQuery 、executeUpdate和execute

1、ResultSet executeQuery(String sqlString)：执行查询数据库的SQL语句,返回一个结果集（ResultSet）对象。

2、int executeUpdate(String sqlString)：用于执行INSERT、UPDATE或DELETE语句以及SQL DDL语句，如：CREATE TABLE和DROP TABLE等

3、execute(sqlString):用于执行返回多个结果集、多个更新计数或二者组合的语句。

具体实现的代码：

```
ResultSet rs = stmt.executeQuery("SELECT * FROM ...") ;
int rows = stmt.executeUpdate("INSERT INTO ...") ;
boolean flag = stmt.execute(String sql) ;
```

**6.处理结果**

两种情况：

1、执行更新返回的是本次操作影响到的记录数。

2、执行查询返回的结果是一个ResultSet对象。

ResultSet包含符合SQL语句中条件的所有行，并且它通过一套get方法提供了对这些行中数据的访问。

使用结果集（ResultSet）对象的访问方法获取数据：

```
while (rs.next()) {
	String name = rs.getString("name");
	String pass = rs.getString(1); // 此方法比较高效
}
```

（列是从左到右编号的，并且从列1开始）

** 7.关闭JDBC对象**

操作完成以后要把所有使用的JDBC对象全都关闭，以释放JDBC资源，

关闭顺序和声明顺序相反：

1、关闭记录集

2、关闭声明

3、关闭连接对象

```
if (rs != null) {
	// 关闭记录集
	try {
		rs.close();
	} catch (SQLException e) {
		e.printStackTrace();
	}
}
if (stmt != null) {
	// 关闭声明
	try {
		stmt.close();
	} catch (SQLException e) {
		e.printStackTrace();
	}
}
if (conn != null) {
	// 关闭连接对象
	try {
		conn.close();
	} catch (SQLException e) {
		e.printStackTrace();
	}
}
```

### 四、hibernate映射的几种方式？

1. 多对一单向映射（User- Group）
2. 多对多双向映射（User<- Role）
3. 多对多单向映射（User<-Role）
4. 一对一主键双向（Person?-> IdCard）
5. 一对一主键单向（Person--> IdCard）
6. 一对一外键单向（Person--> IdCard）
7. 一对一外键双向（Person<--> IdCard）
8. 一对多单向（Group--> User）
9. 一对多双向（Group<--> User）
10. 继承映射（Pig和Bird 继承Animal）--一棵继承树映射成一张表
11. 继承映射（Pig和Bird 继承Animal）--每个具体类映射成一张表joined-classs
12. 继承映射（Pig和Bird 继承Animal）--每个子类类映射成一张表union-subclass
13. component映射
14. Set,Map,Arrary[],List映射
